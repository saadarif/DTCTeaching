Hyperacute-S_48hrs_after_event, levels=design )
fit <- contrasts.fit(fit, contrast.matrix)
fit<- lmFit(eset, design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- ebayes(fit2)
toptable(fit2, coef=1, adjust="BH")
fit<- lmFit(eset, design)
topTable(fit2, coef=1, adjust="BH")
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
topTable(fit2, coef=1, adjust="BH")
topTable(fit2, coef=3, adjust="BH")
?topTable
results <- decideTests(fit2)
vennDiagram(results)
targets <- readTargets("Targets.txt")
View(cbind(idatFiles, targets))
grep(".*_", idatFiles)
grep(".*_", targets$File)
gsub(".*_","", targets$File)
gsub("_.*$","", targets$File)
idatFiles
gsub("_([^_]*)$","", targets$File)
gsub("_([^_]*)$","", idatFiles)
targets$File <- paste0(targets$File,"_Grn.idat")
targets
idatFiles
idatFiles[sort(order(targets$File)[idatFiles])]
idatFiles
idatFiles == targets$File
idatFiles[sort(order(targets$File)[idatFiles])]
order(targets$File)
Ndata <- readIdatFiles(targets$File)
pData(Ndata)[,"sampleFac"] = targets$Condition #add conditions
pData(Ndata)[,"sampleFac"] = as.factor(pData(Ndata)[,"sampleFac"]) #change into factors
pData(Ndata)[,2] = relevel(pData(Ndata)[,2],ref = "Control") #relevel the factors with the baseline being the control
pData(Ndata)[,"sampleFac"]
pData(Ndata)
Ndata <- readIdatFiles(targets$File)
pData(Ndata)
pData(Ndata)[,"sampleFac"] = targets$Condition #add conditions
pData(Ndata)[,"sampleFac"] = as.factor(pData(Ndata)[,"sampleFac"]) #change into factors
pData(Ndata)[,2] = relevel(pData(Ndata)[,2],ref = "Control") #relevel the factors with the baseline being the control
#-------------------------------------------------------
#NORMALIZATION AND FILTERING
#normalize (available options: options are "quantile", "qspline", "vsn", "rankInvariant", "median" and "none"). Change accordingly if necessary.
Ndata.norm = normaliseIllumina(BSData = Ndata,method = "neqc",transform = "log2")
#Filter non-responding probes
#This is similar to removing lowly expressed genes but uses
#Information from illumina with the additional benefit of discarding probes with a high expression level caused by
#non-specific hybridization
#Four basic annotation quality categories (`Perfect', `Good', `Bad' and `No match') are defined and have been shown to
#correlate with expression level and measures of differential expression.
ids<-as.character(featureNames(Ndata.norm))
qual <- unlist(mget(ids, illuminaHumanv3PROBEQUALITY, ifnotfound = NA))
table(qual)
#remove the rows (probes) with bad or no match
rem <- qual == "Bad" | qual == "No match" | is.na(qual)
#update the normalized expression set
Ndata_norm_filt <- Ndata.norm[!rem,]
#Prepare data for DE analysis in Limma
#ie. convert the illumina expression set object into a eset
eset.exprs = as.data.frame(exprs(Ndata_norm_filt)) #get exprs
names(eset.exprs) = targets$File
#remove inf values if any
is.na(eset.exprs) = do.call(cbind,lapply(eset.exprs, is.infinite))
eset.exprs = as.matrix(eset.exprs[complete.cases(eset.exprs),])
# create new pData
phenoData = new(Class = 'AnnotatedDataFrame',data = pData(Ndata))
#create new expressionSet object
eset = ExpressionSet(assayData = as.matrix(eset.exprs),phenoData = phenoData,annotation = 'Humanv4')
eset = addFeatureData(eset,toAdd = c("SYMBOL", "PROBEQUALITY", "CODINGZONE", "PROBESEQUENCE", "GENOMICLOCATION")) #add other features from IlluminaV3 pacakge.
#The following just make an expression data frame from the eset object
#exprs.df = cbind(exprs(eset),as(eset@featureData,Class = 'data.frame'))
#exprs.df = exprs.df[,-grep(pattern = 'Row.names',x = colnames(exprs.df))]
#--------------------------------------------------
#MDS PLOT for sanity checking
#Do an MDs plot to see how the samples seperate
#It might be worth playing around with different normalization methods
plotMDS(eset, labels = pData(eset)[,"sampleFac"])
#-----------------------------------------------
#Differential Expression Using Limma
#To understand how analysis with Limma works
#it's best to read pages 41-48 from the Limma user's guide
#The limma user's guide can be access within R using the function
#limmaUsersGuide()
design <- model.matrix(~0+targets$Condition)
colnames(design) <- levels(as.factor(targets$Condition))
#Estimate the correlation between measurements on the same patient
#corfit <- duplicateCorrelation(eset, design, block=targets$Patient)
#check if the correlation is big > 0.1 or -0.1
#corfit$consensus.correlation
#In this case its tiny and we'll just ignore it
#Otherwise follow the setup on limmaUsersGuide() pg 49
#Fit the model in limma
fit<- lmFit(eset, design)
#Specify all pairwise comparisons
contrast.matrix <- makeContrasts(Control-Hyperacute, Control-S_48hrs_after_event,
Hyperacute-S_48hrs_after_event, levels=design )
#Now perform all pairwise comparisons
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
#To compare genes differentially expressed between hyperacute vs 48 hours later
topTable(fit2, coef=3, adjust="BH")
#Venn diagram for all three comparisons
results <- decideTests(fit2)
vennDiagram(results)
eset.exprs = as.matrix(eset.exprs[complete.cases(eset.exprs),])
phenoData = new(Class = 'AnnotatedDataFrame',data = pData(Ndata))
eset = ExpressionSet(assayData = as.matrix(eset.exprs),phenoData = phenoData,annotation = 'Humanv4')
eset = addFeatureData(eset,toAdd = c("SYMBOL", "PROBEQUALITY", "CODINGZONE", "PROBESEQUENCE", "GENOMICLOCATION")) #add other features from IlluminaV3 pacakge.
Ndata <- readIdatFiles(targets$File)
pData(Ndata)
pData(Ndata)[,"sampleFac"]
targets$Condition
targets
pData(Ndata)[,"sampleFac"] = targets$Condition
pData(Ndata)[,"sampleFac"]
pData(Ndata)[,"sampleFac"] = as.factor(pData(Ndata)[,"sampleFac"])
pData(Ndata)[,2]
pData(Ndata)[,2] = relevel(pData(Ndata)[,2],ref = "Control")
Ndata.norm = normaliseIllumina(BSData = Ndata,method = "neqc",transform = "log2")
ids<-as.character(featureNames(Ndata.norm))
qual <- unlist(mget(ids, illuminaHumanv3PROBEQUALITY, ifnotfound = NA))
table(qual)
rem <- qual == "Bad" | qual == "No match" | is.na(qual)
Ndata_norm_filt <- Ndata.norm[!rem,]
eset.exprs = as.data.frame(exprs(Ndata_norm_filt)) #get exprs
names(eset.exprs)
targets$File
sub('_([^_]*)$',targets$File)
sub('_([^_]*)$','',targets$File)
names(eset.exprs) = sub('_([^_]*)$','',targets$File) #remove the file extensions
is.na(eset.exprs) = do.call(cbind,lapply(eset.exprs, is.infinite))
eset.exprs = as.matrix(eset.exprs[complete.cases(eset.exprs),])
phenoData = new(Class = 'AnnotatedDataFrame',data = pData(Ndata))
eset = ExpressionSet(assayData = as.matrix(eset.exprs),phenoData = phenoData,annotation = 'Humanv4')
eset = addFeatureData(eset,toAdd = c("SYMBOL", "PROBEQUALITY", "CODINGZONE", "PROBESEQUENCE", "GENOMICLOCATION")) #add other features from IlluminaV4 pacakge.
plotMDS(eset, labels = pData(eset)[,"sampleFac"])
design <- model.matrix(~0+targets$Condition)
colnames(design) <- levels(as.factor(targets$Condition))
fit<- lmFit(eset, design)
contrast.matrix <- makeContrasts(Control-Hyperacute, Control-S_48hrs_after_event,
Hyperacute-S_48hrs_after_event, levels=design )
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
topTable(fit2, coef=3, adjust="BH")
topTable(fit2, coef=1, adjust="BH")
design <- model.matrix(~0+pData(eset)[,"sampleFac"])
design
topTable(fit2, coef=3 adjust="BH")
topTable(fit2, coef=1 adjust="BH")
topTable(fit2, coef=1, adjust="BH")
topTable(fit2, coef=2, adjust="BH")
help("illuminaHumanv3")
boxplot(exprs(eset))
boxplot(log2(exprs(eset)))
boxplot(exprs(eset))
Ndata.norm = normaliseIllumina(BSData = Ndata,method = "quantile",transform = "log2")
#Filter non-responding probes
#This is similar to removing lowly expressed genes but uses
#Information from illumina with the additional benefit of discarding probes with a high expression level caused by
#non-specific hybridization
#Four basic annotation quality categories (`Perfect', `Good', `Bad' and `No match') are defined and have been shown to
#correlate with expression level and measures of differential expression.
ids<-as.character(featureNames(Ndata.norm))
qual <- unlist(mget(ids, illuminaHumanv3PROBEQUALITY, ifnotfound = NA))
table(qual)
#remove the rows (probes) with bad or no match
rem <- qual == "Bad" | qual == "No match" | is.na(qual)
#update the normalized expression set
Ndata_norm_filt <- Ndata.norm[!rem,]
#Prepare data for DE analysis in Limma
#ie. convert the illumina expression set object into a eset
eset.exprs = as.data.frame(exprs(Ndata_norm_filt)) #get exprs
names(eset.exprs) = sub('_([^_]*)$','',targets$File) #remove the file extensions
#remove inf values if any
is.na(eset.exprs) = do.call(cbind,lapply(eset.exprs, is.infinite))
eset.exprs = as.matrix(eset.exprs[complete.cases(eset.exprs),])
# create new pData
phenoData = new(Class = 'AnnotatedDataFrame',data = pData(Ndata))
#create new expressionSet object to use with Limma
eset = ExpressionSet(assayData = as.matrix(eset.exprs),phenoData = phenoData,annotation = 'Humanv4')
eset = addFeatureData(eset,toAdd = c("SYMBOL", "PROBEQUALITY", "CODINGZONE", "PROBESEQUENCE", "GENOMICLOCATION")) #add other features from IlluminaV4 pacakge.
boxplot(exprs(eset))
boxplot(exprs(eset), range=0)
Ndata
eset
plotMDS(eset, labels = pData(eset)[,"sampleFac"])
targets
targets <- readTargets("Targets.txt")
targets
targets$File <- paste0(targets$File,"_Grn.idat")
targets
targets
targets <- readTargets("Targets.txt")
targets
Ndata
Ndata <- readIdatFiles(targets$File)
targets$File <- paste0(targets$File,"_Grn.idat")
Ndata <- readIdatFiles(targets$File)
ids<-as.character(featureNames(Ndata.norm))
ids
qual <- unlist(mget(ids, illuminaHumanv4PROBEQUALITY, ifnotfound = NA))
eset.exprs = as.data.frame(exprs(Ndata_norm_filt)) #get exprs
names(eset.exprs)
names(eset.exprs) = sub('_([^_]*)$','',targets$File)
names(eset.exprs)
dim(eset.exprs)
class(Ndata)
limmaUsersGuide()
design <- model.matrix(~0+targets$Condition)
colnames(design) <- levels(as.factor(targets$Condition))
design
topTable(fit2, coef=1, adjust="BH")
help("topTable")
topTable(fit2, coef=1, adjust="none")
head(results)
results
names(results)
dim(eset)
topTable(fit2, coef=1, adjust="none", number=30075)
x<-topTable(fit2, coef=1, adjust="none", number=30075)
dim(x)
names(x)
x1 <- x$SYMBOL[x$P.Value < 0.05]
length(x1)
?topTableF
summary(results)
x
x1
x1 <- x$Row.names[x$P.Value < 0.05]
x1
names(fData(eset))
y<- fData(eset)[, x1 %in% "Row.names"]
y
y<- fData(eset)[x1 %in% "Row.names", ]
y
sampleNames(eset)
row.names(eset)
eset2 = eset1[, row.names(eset1) %in% x1]
eset2 = eset1[, row.names(eset1) %in% x1]
eset2 = eset1[, row.names(eset1) %in% x1]
eset2 = eset[, row.names(eset) %in% x1]
x1
row.names(eset)
length(x1)
eset2 = eset[, row.names(eset) %in% x1]
featureNames(eset)
head(featureNames(eset))
gns <- select(x1, featureNames(eset))
gns <- select(x1, featureNames(eset), c("SYMBOL","GENENAME"))
eset2 = eset[ row.names(eset) %in% x1,]
dim(eset2)
plotMDS(eset2, labels = pData(eset)[,"sampleFac"])
DEprobes <- results2$SYMBOL[results2$P.Value < 0.05]
DEprobes <- x$SYMBOL[x$P.Value < 0.05]
lenght(DEprobes)
length(DEprobes)
dim(eset)
dim(eset2)
output <- results2[results2$P.Value < 0.05, c(1,2, 7, 10)]
setwd("~/Desktop/U15529/Workshop12016")
rm(list = ls())
setwd("~/Desktop/U15529/Workshop12016")
getwd ()
comp.dat <- read.csv("compensation.csv")
names(comp.dat)  #returns names of the columns
head(comp.dat)  #returns first six rows, including labels
par(mfrow = c(1,1))
?boxplot
boxplot (Fruit~Grazing, data=comp.dat)
boxplot (Fruit~Grazing, data=comp.dat,
xlab="Habitat Management",
ylab="Fruit Production (g)")
boxplot (Fruit~Grazing, data=comp.dat,
xlab="Habitat Management",
ylab="Fruit Production (g)",
boxwex=0.5)
?par #scroll down about halfway to mfcol, mfrow
par(mfrow = c(2,1))
boxplot (Fruit~Grazing, data=comp.dat,
xlab="Habitat Management",
ylab="Fruit Production (g)",
boxwex=0.5)
boxplot (Root~Grazing, data=comp.dat,
xlab="Habitat Management",
ylab="Root Biomass (g)",
boxwex=0.5)
par(mfrow = c(1,2))
boxplot (Fruit~Grazing, data=comp.dat,
xlab="Habitat Management",
ylab="Fruit Production (g)",
boxwex=0.5)
boxplot (Root~Grazing, data=comp.dat,
xlab="Habitat Management",
ylab="Root Biomass (g)",
boxwex=0.5)
plantago.data <- read.csv("PlantagoData-2017.csv")
names(plantago.data)  #returns names of the columns
head(plantago.data)  #returns first six rows, including labels
par(mfrow = c(1,1))
hist(plantago.data$Pm.leaflength.cm.)
hist(plantago.data$Pm.leaflength.cm.,
xlab="Leaf length (cm)",
ylab="Frequency", main="")
par(mfrow = c(1,1))
plot (Fruit~Root, data=comp.dat)
plot (Fruit~Root, data=comp.dat,
xlab="Root Biomass (g)",
ylab="Fruit Production (g)")
plot (Fruit~Root, data=comp.dat,
xlab= list("Root Biomass (g)",cex=1.5),
ylab= list("Fruit Production (g)",cex=0.5))
?plot
?par
?points    #scroll almost halfway down and see what pch=21 gives you
plot (Fruit~Root, data=comp.dat,
xlab= list("Root Biomass (g)",cex=1.0),
ylab= list("Fruit Production (g)",cex=1.0),
cex=2.0, pch = 21, bg = "grey")
head(comp.dat)
names(comp.dat)
culr<- c("green","blue")
culr[comp.dat$Grazing]
plot (Fruit~Root, data=comp.dat,
xlab= list("Root Biomass (g)",cex=1.0),
ylab= list("Fruit Production (g)",cex=1.0),
cex=1.5, pch = 21, bg = culr[Grazing])
legend (5,110, legend = c("Grazed", "Ungrazed"),
pch = 21, pt.bg = c("Green", "Blue"), pt.cex=1.5)
culr<- c("red","yellow")
plot (Fruit~Root, data=comp.dat,
xlab= list("Root Biomass (g)",cex=1.0),
ylab= list("Fruit Production (g)",cex=1.0),
cex=1.5, pch = 22, bg = culr[Grazing])
legend (5,110, legend = c("Grazed", "Ungrazed"),
pch = 22, pt.bg = c("Red", "Yellow"), pt.cex=1.5)
setwd("~/Desktop/U15529/Workshop12017")
setwd("~/Desktop/U15529/Workshop12017")
getwd ()
#use the compensation dataset from and import it as an object "comp.data"
gator.dat <- read.csv("gator.csv")
names(gator.dat)  #returns names of the columns
head(gator.dat)  #returns first six rows, including labels
gator.dat <- read.csv("gator.csv")
#Check the data to confirm it is what you expected
#read the text in the console as you do this
names(gator.dat)  #returns names of the columns
head(gator.dat)
boxplot (pelvic_width~sex, data=gator.dat,
xlab="Habitat Management",
ylab="Fruit Production (g)",
boxwex=0.5)
boxplot (snout_vent_lengtht~sex, data=gator.dat,
xlab="Habitat Management",
ylab="Root Biomass (g)",
boxwex=0.5)
par(mfrow = c(2,1))
#Now adapt the boxplot code from Script1 to use it to make the desired
#boxplots for the gator.data. You should be able to copy and pasted the code
#here but you will have to change the names so they reflect the names of the
#columns variables in the gator.dat instead of comp.dat
#PLEASE WRITE YOUR CODE BELOW
boxplot (pelvic_width~sex, data=gator.dat,
xlab="Habitat Management",
ylab="Fruit Production (g)",
boxwex=0.5)
boxplot (snout_vent_lengtht~sex, data=gator.dat,
xlab="Habitat Management",
ylab="Root Biomass (g)",
boxwex=0.5)
par(mfrow = c(2,1))
boxplot (pelvic_width~sex, data=gator.dat,
xlab="Habitat Management",
ylab="Fruit Production (g)",
boxwex=0.5)
boxplot (snout_vent_length~sex, data=gator.dat,
xlab="Habitat Management",
ylab="Root Biomass (g)",
boxwex=0.5)
par(mfrow = c(1,2))
#Now adapt the boxplot code from Script1 to use it to make the desired
#boxplots for the gator.data. You should be able to copy and pasted the code
#here but you will have to change the names so they reflect the names of the
#columns variables in the gator.dat instead of comp.dat
#PLEASE WRITE YOUR CODE BELOW
boxplot (pelvic_width~sex, data=gator.dat,
xlab="Habitat Management",
ylab="Fruit Production (g)",
boxwex=0.5)
boxplot (snout_vent_length~sex, data=gator.dat,
xlab="Habitat Management",
ylab="Root Biomass (g)",
boxwex=0.5)
par(mfrow = c(2,1))
boxplot (Fruit~Grazing, data=comp.dat,
xlab="Habitat Management",
ylab="Fruit Production (g)",
boxwex=0.5, main= "A")
boxplot (Root~Grazing, data=comp.dat,
xlab="Habitat Management",
ylab="Root Biomass (g)",
boxwex=0.5, main="B")
par(mfrow = c(1,2))
#The code above lets us plot two graphs side by side
#How could you change this code to plot two graphs on top of one another?
boxplot (Fruit~Grazing, data=comp.dat,
xlab="Habitat Management",
ylab="Fruit Production (g)",
boxwex=0.5, main="A")
boxplot (Root~Grazing, data=comp.dat,
xlab="Habitat Management",
ylab="Root Biomass (g)",
boxwex=0.5, main="B")
summary(plantago.data)
apply(plantago.data, 2,  sd, na.rm=T)
apply(plantago.data, 2,  var, na.rm=T)
setwd("~/Desktop/RNASeqLaurienne")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
y
y
library(DESeq2)
control <- read.txt("Control_Counts.txt", header=T)
control <- read.table("Control_Counts.txt", header=T)
head(control)
dim(control)
lps <- read.table("LPS_Counts.txt", header=T)
dim(lps)
head(lps)
il4 <- read.table("IL4_Counts.txt", header=T)
all_counts <- cbind(control, lps[,2::], il4[,2::])
hel(":")
help(":")
dim(lps)
dim(lps)[2]
all_counts <- cbind(control, lps[,2:dim(lps)[2]], il4[,2:dim(il4)[2]])
dim(all_counts)
head(all_counts)
dim(all_counts)
targets <- read.table("Targets.txt", header=T)
targets <- read.table("Targets.txt", header=T)
View(targets)
help("SummarizedExperiment")
names(targets)
ddsMat <- DESeqDataSetFromMatrix(countData = all_counts,
colData = targets,
design = ~ Treatment + Genotype)
library(DESeq2)
biocLite("DESeq2")
library(DESeq2)
remove.packages(c("DESeq2", "DESeq")
)
biocLite("DESeq2")
library(DESeq2)
remove.packages(c("DESeq2"))
library(DESeq2)
biocLite("DESeq2", depe)
biocLite("DESeq2", depe)
biocLite("DESeq2")
library(DESeq2)
source("http://www.rforge.net/FSATeach/InstallFSATeach.R")
install.packages("tcltk")
library(tcltk)
install.packages(("relac"))
install.packages(("relax"))
install.packages(("tcltk"))
install.packages(("tkrplot"))
install.packages(("TeachingDemos"))
source("http://www.rforge.net/FSATeach/InstallFSATeach.R")
capabilities("tcltk")
system("ls -ld /usr/local /usr/local/lib /usr/local/lib/libtcl*")
??qqplot
quantile(iris$Petal.Length[iris$Species=="setosa"])
par(mfrow=c(2,2))
plot(drug_anova, 1)
par(mfrow=c(2,2))
plot(drug_anova, 1)
drugTrials <- read.csv("https://git.io/JewAf")
drug_anova <- aov(SCORE~GENDER*DOSE, data=drugTrials)
summary(drug_anova)
par(mfrow=c(2,2))
plot(drug_anova, 1)
plot(drug_anova, 2)
plot(drug_anova, 3)
plot(drug_anova, 5)
plot(drugTrials$DOSE, residuals(tooth.aov))
plot(drugTrials$DOSE, residuals(drug_anova))
plot(drugTrials$GENDER, residuals(drug_anova))
setwd("~/Downloads/")
amazon <-read.csv("amazon.csv")
head(amazon)
amazon
par(mfrow=c(1,2))
# assumption 2: homogeneity of variance
plot(drug_anova, 1)
# There does seem to be more spread on the left hand side but its not too extreme
#assumption 3 of normality of residuals
plot(drug_anova, 2)
plot(drug_anova, 1)
par(mfrow=c(1,2))
# assumption 2: homogeneity of variance
plot(drug_anova, 1)
# There does seem to be more spread on the left hand side but its not too extreme
#assumption 3 of normality of residuals
plot(drug_anova, 2)
plot(drug_anova, 3)
library(slidify)
setwd("~/Desktop/courses/DTCTeaching/IntroductionLinearModels")
slidify("index.Rmd")
slidify("index.Rmd")
